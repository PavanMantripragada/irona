##############################################################################
#
# GitGub CI workflow syntax spec:
#    https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# Coveralls example:
#    https://github.com/marketplace/actions/coveralls-github-action
#
##############################################################################

name: Build

on:
  # Triggered whenever push to the branch
  push:
    branches: 
    - main
    - phase2
    - phase3

  # Triggered whenever a pull request is created on master
  pull_request:
    branches: [ "master" ]
    types: [opened]

  # Allow manual trigger
  workflow_dispatch:

jobs:
  build:
    # Create a container of the latest Ubuntu, other values could be
    # ubuntu-latest, ubuntu-22.04, etc.
    runs-on: ubuntu-20.04
    
    steps:
      # We want to use GitHub CI checkout version 3 for checking out the branch
      - uses: actions/checkout@v3
        with:
          path: wworkspace/src/my_package
      name: Create dependency workspace
        run: |
             export dir_path=${{github.workspace}}
             mkdir -p $HOME/cat_ws/src
      - uses: betwo/github-setup-catkin@v1.3.0
        with:
          ros-version: 'noetic'
          workspace: $HOME/cat_ws
      # Install OpenCV
      - name: install opencv 
        run: |   
            sudo apt-get install -y libopencv-dev 
            sudo apt-get install -y libopencv-contrib-dev
      # - name: install ros
      #   run: |
      #       wget -c https://raw.githubusercontent.com/qboticslabs/ros_install_noetic/master/ros_install_noetic.sh && chmod +x ./ros_install_noetic.sh && ./ros_install_noetic.sh
      #       source /opt/ros/noetic/setup.bash
      #       sudo apt install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential
      #       sudo rosdep init
      #       rosdep update
      # - name: turtlebot3 dependencies
      #   run: |
            # sudo apt install -y ros-noetic-ros-control* ros-noetic-control* ros-noetic-moveit*
            # sudo apt install -y ros-noetic-ros-controllers ros-noetic-gazebo* ros-noetic-industrial-core
            # sudo apt install -y ros-noetic-dynamixel-sdk ros-noetic-dynamixel-workbench* 
            # sudo apt install -y ros-noetic-robotis-manipulator
            # sudo apt install -y ros-noetic-turtlebot3-msgs ros-noetic-turtlebot3
            # sudo apt install -y ros-noetic-vision-msgs
            # sudo apt install -y ros-noetic-laser-proc ros-noetic-rgbd-launch ros-noetic-map-server \
            # ros-noetic-move-base ros-noetic-urdf ros-noetic-xacro \
            # ros-noetic-compressed-image-transport ros-noetic-rqt* ros-noetic-rviz \
            # ros-noetic-gmapping ros-noetic-navigation ros-noetic-interactive-markers

      # Install some system pacakges
      - name: Install packages
        run: sudo apt install -y lcov

      - name: Create dependency workspace
        run: |
             
             cd $HOME/cat_ws/src/
             git clone -b noetic-devel https://github.com/ROBOTIS-GIT/open_manipulator.git
             git clone -b noetic-devel https://github.com/ROBOTIS-GIT/open_manipulator_msgs.git
             git clone -b noetic-devel https://github.com/ROBOTIS-GIT/open_manipulator_simulations.git
             git clone https://github.com/ROBOTIS-GIT/open_manipulator_dependencies.git
             git clone https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git
             git clone https://github.com/ROBOTIS-GIT/turtlebot3_manipulation_simulations.git
             git clone https://github.com/ROBOTIS-GIT/open_manipulator_dependencies.git
             git clone -b noetic-devel https://github.com/UbiquityRobotics/fiducials.git
             git clone https://github.com/mikeferguson/code_coverage.git
             cd ..
             catkin_make
             source devel/setup.bash

      # - name: Create dependency workspace
      #   run: |
      #        cd ~
      #        mkdir -p dep_ws/src
      #        cd dep_ws/src
      #        cp -r dir_path .
      #        cd ..        
      
      - name: catkin make 
        run: |
              catkin_make
              source devel/setup.bash
              catkin_make -DCATKIN_ENABLE_TESTING=ON -DENABLE_COVERAGE_TESTING=ON -DCMAKE_BUILD_TYPE=Debug irona_coverage_report

      # # Run CMake to setup compilation flags
      # - name: Configure Coverage CMake 
      #   run: cmake -D COVERAGE=ON -D CMAKE_BUILD_TYPE=Debug -B ${{github.workspace}}/build 
      
      # # Compile and executables
      # - name: Build Coverage
      #   working-directory: ${{github.workspace}}/build
      #   run: make

      # Run test suite and compute code coverage
      # - name: Run Test Coverage
      #   working-directory: ${{github.workspace}}/build
      #   run: make code_coverage
      
      # - name: Codecov
      #   uses: codecov/codecov-action@v3.1.1

      # Upload coverage result to Coverage.io 
      - name: Upload result to Coveralls.io
        uses: coverallsapp/github-action@1.1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{github.workspace}}/build/coverage.info.cleaned
          