##############################################################################
#
# GitGub CI workflow syntax spec:
#    https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# Coveralls example:
#    https://github.com/marketplace/actions/coveralls-github-action
#
##############################################################################

name: Build

on:
  # Triggered whenever push to the branch
  push:
    branches: 
    - main
    - phase2
    - phase3

  # Triggered whenever a pull request is created on master
  pull_request:
    branches: [ "master" ]
    types: [opened]

  # Allow manual trigger
  workflow_dispatch:

jobs:
  build:
    # Create a container of the latest Ubuntu, other values could be
    # ubuntu-latest, ubuntu-22.04, etc.
    runs-on: ubuntu-20.04
    
    steps:
      # We want to use GitHub CI checkout version 3 for checking out the branch
      - uses: actions/checkout@v3
        with:
          path: wworkspace/src/my_package
      - name: Create dependency workspace
        run: |
            export dir_path=${{github.workspace}}
            mkdir -p $HOME/cat_ws/src
      - uses: betwo/github-setup-catkin@v1.3.0
        with:
          ros-version: 'noetic'
          workspace: $HOME/cat_ws
      # Install OpenCV
      - name: install opencv 
        run: |   
            sudo apt-get install -y libopencv-dev 
            sudo apt-get install -y libopencv-contrib-dev
      - name: install ros
        run: |
            sudo apt-get install ros-noetic-tf2-geometry-msgs
            sudo apt-get install ros-noetic-move-base-msgs
            sudo apt install ros-noetic-moveit
            sudo apt-get install ros-noetic-gazebo-ros-pkgs


      # - name: turtlebot3 dependencies
      #   run: |
            # sudo apt install -y ros-noetic-ros-control* ros-noetic-control* ros-noetic-moveit*
            # sudo apt install -y ros-noetic-ros-controllers ros-noetic-gazebo* ros-noetic-industrial-core
            # sudo apt install -y ros-noetic-dynamixel-sdk ros-noetic-dynamixel-workbench* 
            # sudo apt install -y ros-noetic-robotis-manipulator
            # sudo apt install -y ros-noetic-turtlebot3-msgs ros-noetic-turtlebot3
            # sudo apt install -y ros-noetic-vision-msgs
            # sudo apt install -y ros-noetic-laser-proc ros-noetic-rgbd-launch ros-noetic-map-server \
            # ros-noetic-move-base ros-noetic-urdf ros-noetic-xacro \
            # ros-noetic-compressed-image-transport ros-noetic-rqt* ros-noetic-rviz \
            # ros-noetic-gmapping ros-noetic-navigation ros-noetic-interactive-markers

      # Install some system pacakges
      - name: Install packages
        run: sudo apt install -y lcov

      - name: Install catkin-tools
        run: |
          sudo apt install python3-catkin-tools python3-osrf-pycommon -y

      # - name: Create dependency workspace
      #   run: |
      #       cd $HOME/cat_ws/src/
      #       git clone https://github.com/mikeferguson/code_coverage.git
      #       cd ..
      #       catkin_make_isolated

      - name: Create dependency workspace
        run: |
             cd $HOME/cat_ws/src
             echo ${{github.workspace}}
             cp -r ${{github.workspace}} .
             cd .. 


      - name: Unit tests
        run: |
          cd $HOME/cat_ws/
          echo "---------------------------- PWD: $PWD"
          echo "----------------------------PWD LS: $PWD/src/$(ls)"
          echo "----------------------------PWD LS: $PWD/src/$(ls)"
          sudo apt install -y lcov
          . /opt/ros/$ROS_DISTRO/setup.bash
          catkin config --cmake-args -DCMAKE_CXX_FLAGS="-Wall -Wno-unused --coverage -fno-inline -fno-inline-small-functions -fno-default-inline" -DCMAKE_C_FLAGS="-Wall -Wno-unused --coverage -fno-inline -fno-inline-small-functions -fno-default-inline" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS="-lgcov"
          catkin build
          catkin run_tests -i && catkin_test_results
        # catkin_make run_tests_Artemis && catkin_test_results
        # echo "----------------------------GitHub WS : ${{github.workspace}}"

      - name: Configure Codecov
        run: |
          cd $HOME/cat_ws/
          echo "---------------------------- PWD: $PWD"
          echo "----------------------------PWD LS: $PWD/$(ls)"
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/opt/*' '/usr/*' '*/devel/*' '*_test*' --output-file coverage.info
          lcov --list coverage.info
          echo "---------------------------- PWD: $PWD"
          echo "----------------------------PWD LS: $PWD/$(ls)"
  
      
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: $HOME/cat_ws/coverage.info       
      
      #- name: catkin make 
      #  run: |
      #        cd $HOME/cat_ws
      #        catkin_make_isolated
      #        catkin_make_isolated -DCATKIN_ENABLE_TESTING=ON -DENABLE_COVERAGE_TESTING=ON -DCMAKE_BUILD_TYPE=Debug irona_coverage_report

      # # Run CMake to setup compilation flags
      # - name: Configure Coverage CMake 
      #   run: cmake -D COVERAGE=ON -D CMAKE_BUILD_TYPE=Debug -B ${{github.workspace}}/build 
      
      # # Compile and executables
      # - name: Build Coverage
      #   working-directory: ${{github.workspace}}/build
      #   run: make

      # Run test suite and compute code coverage
      # - name: Run Test Coverage
      #   working-directory: ${{github.workspace}}/build
      #   run: make code_coverage
      
      # - name: Codecov
      #   uses: codecov/codecov-action@v3.1.1

      # Upload coverage result to Coverage.io 
      #- name: Upload result to Coveralls.io
      #  uses: coverallsapp/github-action@1.1.3
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}
      #    path-to-lcov: ${{github.workspace}}/build/coverage.info.cleaned
          